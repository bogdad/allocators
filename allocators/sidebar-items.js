initSidebarItems({"constant":[["HEAP",""]],"enum":[["Error","Errors that can occur while creating an allocator or allocating from it."]],"mod":[["composable","This module contains some composable building blocks to build allocator chains."],["freelist","A Free List allocator."],["scoped","A scoped linear allocator. This is something of a cross between a stack allocator and a traditional linear allocator."]],"struct":[["AllocBox","An item allocated by a custom allocator."],["Block","A block of memory created by an allocator."],["HeapAllocator","Allocator stub that just forwards to heap allocation. It is recommended to use the `HEAP` constant instead of creating a new instance of this, to benefit from the static lifetime that it provides."],["Place","A place for allocating into. This is only used for in-place allocation, e.g. `let val = in (alloc.make_place().unwrap()) { EXPR }`"]],"trait":[["Allocator","A custom memory allocator."],["BlockOwner","An allocator that knows which blocks have been issued by it."]]});